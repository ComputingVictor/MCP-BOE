#!/usr/bin/env python3
"""
Ejemplos b√°sicos de uso del MCP BOE.

Este script muestra c√≥mo usar las principales funcionalidades
del MCP BOE de forma directa, sin pasar por Claude.
"""

import asyncio
import json
from datetime import datetime, timedelta

from mcp_boe import BOEHTTPClient, BOEMCPServer
from mcp_boe.tools.legislation import LegislationTools
from mcp_boe.tools.summaries import SummaryTools
from mcp_boe.tools.auxiliary import AuxiliaryTools


async def example_search_legislation():
    """Ejemplo: Buscar legislaci√≥n consolidada."""
    print("üîç Ejemplo: B√∫squeda de legislaci√≥n consolidada")
    print("=" * 60)
    
    async with BOEHTTPClient() as client:
        tools = LegislationTools(client)
        
        # Buscar la Ley 40/2015 (R√©gimen Jur√≠dico del Sector P√∫blico)
        print("Buscando 'Ley 40/2015'...")
        results = await tools.search_consolidated_legislation({
            "query": "Ley 40/2015",
            "limit": 3
        })
        
        for result in results:
            print(result.text)
            print()


async def example_get_law_details():
    """Ejemplo: Obtener detalles de una norma espec√≠fica."""
    print("üìú Ejemplo: Detalles de norma espec√≠fica")
    print("=" * 60)
    
    async with BOEHTTPClient() as client:
        tools = LegislationTools(client)
        
        # Obtener detalles de la Constituci√≥n Espa√±ola
        print("Obteniendo detalles de la Constituci√≥n Espa√±ola...")
        results = await tools.get_consolidated_law({
            "law_id": "BOE-A-1978-31229",  # Constituci√≥n Espa√±ola
            "include_metadata": True,
            "include_analysis": True,
            "include_full_text": False
        })
        
        for result in results:
            # Mostrar solo los primeros 1000 caracteres para no saturar
            text = result.text
            if len(text) > 1000:
                text = text[:1000] + "...\n\n[Contenido truncado para el ejemplo]"
            print(text)
            print()


async def example_get_law_structure():
    """Ejemplo: Obtener estructura de una norma."""
    print("üìë Ejemplo: Estructura de norma")
    print("=" * 60)
    
    async with BOEHTTPClient() as client:
        tools = LegislationTools(client)
        
        # Obtener estructura de la Ley 40/2015
        print("Obteniendo estructura de la Ley 40/2015...")
        results = await tools.get_law_structure({
            "law_id": "BOE-A-2015-10566"  # Ley 40/2015
        })
        
        for result in results:
            print(result.text)
            print()


async def example_get_boe_summary():
    """Ejemplo: Obtener sumario del BOE."""
    print("üì∞ Ejemplo: Sumario del BOE")
    print("=" * 60)
    
    async with BOEHTTPClient() as client:
        tools = SummaryTools(client)
        
        # Obtener sumario de una fecha reciente conocida
        test_date = "20240529"  # 29 de mayo de 2024 (fecha de ejemplo)
        print(f"Obteniendo sumario del BOE para {test_date}...")
        
        results = await tools.get_boe_summary({
            "date": test_date,
            "max_items": 10  # Limitar para el ejemplo
        })
        
        for result in results:
            # Mostrar solo los primeros 1500 caracteres
            text = result.text
            if len(text) > 1500:
                text = text[:1500] + "...\n\n[Contenido truncado para el ejemplo]"
            print(text)
            print()


async def example_search_recent_boe():
    """Ejemplo: Buscar en BOE reciente."""
    print("üîç Ejemplo: B√∫squeda en BOE reciente")
    print("=" * 60)
    
    async with BOEHTTPClient() as client:
        tools = SummaryTools(client)
        
        print("Buscando 'Real Decreto' en los √∫ltimos 7 d√≠as...")
        results = await tools.search_recent_boe({
            "days_back": 7,
            "search_terms": "Real Decreto"
        })
        
        for result in results:
            print(result.text)
            print()


async def example_get_departments():
    """Ejemplo: Obtener tabla de departamentos."""
    print("üèõÔ∏è Ejemplo: Tabla de departamentos")
    print("=" * 60)
    
    async with BOEHTTPClient() as client:
        tools = AuxiliaryTools(client)
        
        print("Buscando departamentos que contengan 'Ministerio'...")
        results = await tools.get_departments_table({
            "search_term": "Ministerio",
            "limit": 10
        })
        
        for result in results:
            # Mostrar solo los primeros 1000 caracteres
            text = result.text
            if len(text) > 1000:
                text = text[:1000] + "...\n\n[Contenido truncado para el ejemplo]"
            print(text)
            print()


async def example_get_legal_ranges():
    """Ejemplo: Obtener rangos normativos."""
    print("‚öñÔ∏è Ejemplo: Rangos normativos")
    print("=" * 60)
    
    async with BOEHTTPClient() as client:
        tools = AuxiliaryTools(client)
        
        print("Obteniendo tabla de rangos normativos...")
        results = await tools.get_legal_ranges_table({})
        
        for result in results:
            print(result.text)
            print()


async def example_search_auxiliary():
    """Ejemplo: B√∫squeda en tablas auxiliares."""
    print("üîç Ejemplo: B√∫squeda en tablas auxiliares")
    print("=" * 60)
    
    async with BOEHTTPClient() as client:
        tools = AuxiliaryTools(client)
        
        print("Buscando 'Hacienda' en todas las tablas auxiliares...")
        results = await tools.search_auxiliary_data({
            "query": "Hacienda"
        })
        
        for result in results:
            print(result.text)
            print()


async def example_get_code_description():
    """Ejemplo: Obtener descripci√≥n de c√≥digo."""
    print("üîç Ejemplo: Descripci√≥n de c√≥digo")
    print("=" * 60)
    
    async with BOEHTTPClient() as client:
        tools = AuxiliaryTools(client)
        
        print("Obteniendo descripci√≥n del c√≥digo '7723'...")
        results = await tools.get_code_description({
            "code": "7723"  # Jefatura del Estado
        })
        
        for result in results:
            print(result.text)
            print()


async def run_all_examples():
    """Ejecuta todos los ejemplos."""
    print("üöÄ Ejecutando todos los ejemplos del MCP BOE")
    print("=" * 80)
    print()
    
    examples = [
        ("B√∫squeda de legislaci√≥n", example_search_legislation),
        ("Detalles de norma", example_get_law_details),
        ("Estructura de norma", example_get_law_structure),
        ("Sumario del BOE", example_get_boe_summary),
        ("B√∫squeda reciente BOE", example_search_recent_boe),
        ("Tabla de departamentos", example_get_departments),
        ("Rangos normativos", example_get_legal_ranges),
        ("B√∫squeda auxiliares", example_search_auxiliary),
        ("Descripci√≥n de c√≥digo", example_get_code_description),
    ]
    
    for i, (name, func) in enumerate(examples, 1):
        try:
            print(f"\n{'='*20} {i}/{len(examples)}: {name} {'='*20}")
            await func()
            print(f"‚úÖ Completado: {name}")
            
        except Exception as e:
            print(f"‚ùå Error en {name}: {e}")
        
        # Pausa entre ejemplos para no saturar la API
        if i < len(examples):
            print(f"\n‚è∏Ô∏è Pausa de 2 segundos antes del siguiente ejemplo...")
            await asyncio.sleep(2)
    
    print("\n" + "=" * 80)
    print("üéâ Todos los ejemplos completados")


async def interactive_demo():
    """Demo interactivo del MCP BOE."""
    print("üéÆ Demo interactivo del MCP BOE")
    print("=" * 50)
    print()
    
    async with BOEHTTPClient() as client:
        leg_tools = LegislationTools(client)
        sum_tools = SummaryTools(client)
        aux_tools = AuxiliaryTools(client)
        
        while True:
            print("\nüìã Opciones disponibles:")
            print("1. Buscar legislaci√≥n")
            print("2. Obtener sumario BOE reciente")
            print("3. Buscar departamentos")
            print("4. Obtener c√≥digo espec√≠fico")
            print("5. Salir")
            
            try:
                choice = input("\nElige una opci√≥n (1-5): ").strip()
                
                if choice == "1":
                    query = input("Ingresa t√©rminos de b√∫squeda: ").strip()
                    if query:
                        print(f"\nüîç Buscando '{query}'...")
                        results = await leg_tools.search_consolidated_legislation({
                            "query": query,
                            "limit": 5
                        })
                        for result in results:
                            print(result.text)
                
                elif choice == "2":
                    # Usar fecha reciente (algunos d√≠as atr√°s para asegurar disponibilidad)
                    recent_date = (datetime.now() - timedelta(days=3)).strftime("%Y%m%d")
                    print(f"\nüì∞ Obteniendo sumario BOE reciente ({recent_date})...")
                    results = await sum_tools.get_boe_summary({
                        "date": recent_date,
                        "max_items": 5
                    })
                    for result in results:
                        text = result.text
                        if len(text) > 1000:
                            text = text[:1000] + "...\n[Contenido truncado]"
                        print(text)
                
                elif choice == "3":
                    search = input("Buscar departamentos (o Enter para todos): ").strip()
                    print(f"\nüèõÔ∏è Buscando departamentos...")
                    args = {"limit": 10}
                    if search:
                        args["search_term"] = search
                    
                    results = await aux_tools.get_departments_table(args)
                    for result in results:
                        text = result.text
                        if len(text) > 800:
                            text = text[:800] + "...\n[Contenido truncado]"
                        print(text)
                
                elif choice == "4":
                    code = input("Ingresa c√≥digo a buscar (ej: 7723): ").strip()
                    if code:
                        print(f"\nüîç Buscando c√≥digo '{code}'...")
                        results = await aux_tools.get_code_description({
                            "code": code
                        })
                        for result in results:
                            print(result.text)
                
                elif choice == "5":
                    print("\nüëã ¬°Hasta luego!")
                    break
                
                else:
                    print("\n‚ùå Opci√≥n inv√°lida. Por favor elige 1-5.")
            
            except KeyboardInterrupt:
                print("\n\nüëã Demo interrumpido. ¬°Hasta luego!")
                break
            except Exception as e:
                print(f"\n‚ùå Error: {e}")


async def connectivity_test():
    """Prueba b√°sica de conectividad."""
    print("üîß Prueba de conectividad con la API del BOE")
    print("=" * 50)
    
    try:
        async with BOEHTTPClient(timeout=10) as client:
            print("1. Probando conexi√≥n b√°sica...")
            
            # Test b√°sico
            health = await client.health_check()
            if health:
                print("   ‚úÖ Conectividad: OK")
            else:
                print("   ‚ùå Conectividad: FALLO")
                return
            
            # Test de b√∫squeda simple
            print("2. Probando b√∫squeda simple...")
            result = await client.search_legislation(limit=1)
            if result and result.get('data'):
                print("   ‚úÖ B√∫squeda: OK")
            else:
                print("   ‚ùå B√∫squeda: FALLO")
                return
            
            print("\nüéâ ¬°Todas las pruebas pasaron! El MCP deber√≠a funcionar correctamente.")
    
    except Exception as e:
        print(f"‚ùå Error durante las pruebas: {e}")


# ============================================================================
# UTILIDADES PARA TESTING
# ============================================================================

def print_separator(title: str):
    """Imprime un separador visual con t√≠tulo."""
    width = 80
    padding = (width - len(title) - 2) // 2
    print("=" * width)
    print(f"{'=' * padding} {title} {'=' * padding}")
    print("=" * width)


async def quick_test():
    """Prueba r√°pida de funcionalidades b√°sicas."""
    print_separator("PRUEBA R√ÅPIDA DEL MCP BOE")
    
    try:
        async with BOEHTTPClient() as client:
            # Test 1: Conectividad
            print("\n1Ô∏è‚É£ Probando conectividad...")
            health = await client.health_check()
            print(f"   Resultado: {'‚úÖ OK' if health else '‚ùå FALLO'}")
            
            if not health:
                print("   ‚ö†Ô∏è Sin conectividad. Saltando otras pruebas.")
                return
            
            # Test 2: B√∫squeda simple
            print("\n2Ô∏è‚É£ Probando b√∫squeda de legislaci√≥n...")
            try:
                tools = LegislationTools(client)
                results = await tools.search_consolidated_legislation({
                    "query": "Constituci√≥n",
                    "limit": 1
                })
                print(f"   Resultado: ‚úÖ Encontrados {len(results)} resultados")
            except Exception as e:
                print(f"   Resultado: ‚ùå Error - {e}")
            
            # Test 3: Tablas auxiliares
            print("\n3Ô∏è‚É£ Probando tablas auxiliares...")
            try:
                aux_tools = AuxiliaryTools(client)
                results = await aux_tools.get_code_description({
                    "code": "7723"
                })
                print(f"   Resultado: ‚úÖ C√≥digo encontrado")
            except Exception as e:
                print(f"   Resultado: ‚ùå Error - {e}")
            
            print(f"\n{'='*30} FIN DE PRUEBAS {'='*30}")
    
    except Exception as e:
        print(f"‚ùå Error general: {e}")


# ============================================================================
# FUNCIONES PRINCIPALES
# ============================================================================

def main():
    """Funci√≥n principal del script de ejemplos."""
    import sys
    
    if len(sys.argv) > 1:
        mode = sys.argv[1].lower()
    else:
        # Mostrar men√∫ interactivo
        print("üöÄ Ejemplos del MCP BOE")
        print("=" * 30)
        print("1. Ejecutar todos los ejemplos")
        print("2. Demo interactivo")
        print("3. Prueba de conectividad")
        print("4. Prueba r√°pida")
        print("5. Salir")
        
        choice = input("\nElige una opci√≥n (1-5): ").strip()
        mode_map = {
            "1": "all",
            "2": "interactive", 
            "3": "connectivity",
            "4": "quick",
            "5": "exit"
        }
        mode = mode_map.get(choice, "exit")
    
    if mode == "all":
        print("üöÄ Ejecutando todos los ejemplos...")
        asyncio.run(run_all_examples())
    
    elif mode == "interactive":
        print("üéÆ Iniciando demo interactivo...")
        asyncio.run(interactive_demo())
    
    elif mode == "connectivity":
        print("üîß Ejecutando prueba de conectividad...")
        asyncio.run(connectivity_test())
    
    elif mode == "quick":
        print("‚ö° Ejecutando prueba r√°pida...")
        asyncio.run(quick_test())
    
    elif mode == "exit":
        print("üëã ¬°Hasta luego!")
        return
    
    else:
        # Modos espec√≠ficos por l√≠nea de comandos
        mode_functions = {
            "search": example_search_legislation,
            "details": example_get_law_details,
            "structure": example_get_law_structure,
            "summary": example_get_boe_summary,
            "recent": example_search_recent_boe,
            "departments": example_get_departments,
            "ranges": example_get_legal_ranges,
            "auxiliary": example_search_auxiliary,
            "code": example_get_code_description,
        }
        
        if mode in mode_functions:
            print(f"üîç Ejecutando ejemplo: {mode}")
            asyncio.run(mode_functions[mode]())
        else:
            print(f"‚ùå Modo desconocido: {mode}")
            print("Modos disponibles: all, interactive, connectivity, quick")
            print("O ejemplos espec√≠ficos: search, details, structure, summary, recent, departments, ranges, auxiliary, code")


if __name__ == "__main__":
    main()