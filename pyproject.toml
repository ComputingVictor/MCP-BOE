[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-boe"
version = "0.1.0"
description = "MCP (Model Context Protocol) para acceso a la API del Boletín Oficial del Estado español"
authors = [
    {name = "Víctor Viloria", email = "vvictor.97@gmail.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
keywords = ["mcp", "boe", "legislation", "spain", "legal", "api"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Legal Industry", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: XML",
]

dependencies = [
    # Core MCP framework
    "mcp>=0.5.0",
    
    # HTTP client for API requests
    "httpx>=0.25.0",
    
    # Data validation and parsing
    "pydantic>=2.0.0",
    
    # Date handling
    "python-dateutil>=2.8.0",
    
    # XML parsing (for BOE responses)
    "lxml>=4.9.0",
    
    # JSON handling improvements
    "orjson>=3.9.0",
    
    # Async support
    "anyio>=3.6.0",
]

[project.optional-dependencies]
api = [
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
]

dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-httpx>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0", 
    "pytest-httpx>=0.21.0",
    "pytest-cov>=4.0.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
]

[project.urls]
Homepage = "https://github.com/tuusuario/mcp-boe"
Documentation = "https://github.com/tuusuario/mcp-boe#readme"
Repository = "https://github.com/tuusuario/mcp-boe.git"
"Bug Tracker" = "https://github.com/tuusuario/mcp-boe/issues"

[project.scripts]
mcp-boe = "mcp_boe.server:main"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_boe"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

# Herramientas de desarrollo
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directorios estándar a excluir
  \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "lxml.*",
    "orjson.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "-ra",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/mcp_boe"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]